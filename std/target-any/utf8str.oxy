class Utf8Str {
	/// converts utf8 to utf64, the encoding used by Str
	def Str (self) Str {
		// https://stackoverflow.com/questions/1543613
		return #asm Str "
			mov r15, qword [rbp + 16] ; utf8
			xor r13, r13              ; number of chars in utf8

			; count number of chars in utf8
			._$_find_chars_loop:
				xor rax, rax
				mov al, byte [r15]

				cmp al, 0
				je ._$_find_chars_end

				mov cl, al
				shr cl, 7          ; if the first bit of the char is 0,
				cmp cl, 0          ; then it is a single byte char
				je ._$_1_byte_char ; otherwise, it is a multi-byte char

				mov cl, al         ; 2-byte char starts with 110x xxxx
				shr cl, 5
				cmp cl, 6
				je ._$_2_byte_char

				mov cl, al         ; 3-byte char starts with 1110 xxxx
				shr cl, 4
				cmp cl, 14
				je ._$_3_byte_char
				; jmp ._$_4_byte_char ; 4-byte char starts with 1111 0xxx
				; _$_4_byte_char:
					xor rcx, rcx
					mov cl, byte [r15+3]
					shl rcx, 8
					mov cl, byte [r15+2]
					shl rcx, 8
					mov cl, byte [r15+1]
					shl rcx, 8
					mov cl, byte [r15]
					inc r13
					push rcx
					add r15, 4
					jmp ._$_find_chars_loop

				._$_3_byte_char:
					xor rcx, rcx
					mov cl, byte [r15+2]
					shl rcx, 8
					mov cl, byte [r15+1]
					shl rcx, 8
					mov cl, byte [r15]
					inc r13
					push rcx
					add r15, 3
					jmp ._$_find_chars_loop

				._$_2_byte_char:
					xor rcx, rcx
					mov cl, byte [r15+1]
					shl rcx, 8
					mov cl, byte [r15]
					inc r13
					push rcx
					add r15, 2
					jmp ._$_find_chars_loop

				._$_1_byte_char:
					push rax
					inc r13
					inc r15
					jmp ._$_find_chars_loop

			._$_find_chars_end:

				; put the string (currently on stack) into a heap allocated array
				push r13 ; save r13 = num characters

				mov rdi, r13
				add rdi, 64 ; add space for null terminator
				mov rsi, 8
				call _LibC.calloc

				pop r13

			._$_move_loop:
				cmp r13, 0
				jle ._$_move_return
				dec r13
				pop rdx
				mov qword [rax + r13 * 8], rdx
				jmp ._$_move_loop

			._$_move_return:
				push rax
		"
	}
}