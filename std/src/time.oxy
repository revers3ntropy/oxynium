def Time.- (self, other: Time) Time {
	let self_micros = self.seconds * 1000000 + self.microseconds
	let other_micros = other.seconds * 1000000 + other.microseconds
	let diff_micros = self_micros - other_micros
	return new Time {
		seconds: diff_micros / 1000000,
		microseconds: diff_micros % 1000000
	}
}

def Time.+ (self, other: Time) Time {
	let self_micros = self.seconds * 1000000 + self.microseconds
	let other_micros = other.seconds * 1000000 + other.microseconds
	let sum_micros = self_micros + other_micros
	return new Time {
		seconds: sum_micros / 1000000,
		microseconds: sum_micros % 1000000
	}
}

def Time.Str (self) ->
	self.seconds.Str() + "." + self.microseconds.Str()

def Time.current_seconds () Int {
	return #asm Int "
		xor rdi, rdi
		call _LibC.time ; return time(NULL)
		push rax
	"
}

def Time.current_microseconds () Int {
	return #asm Int "
		lea rdi, [rsp - 16]
		xor esi, esi
		call _Syscall.microseconds
		mov rax, [rdi + 8]
		push rax
	"
}

def Time.now () -> new Time {
    seconds: Time.current_seconds(),
    microseconds: Time.current_microseconds()
}

def Time.epoch () -> new Time {
    seconds: 0,
    microseconds: 0
}
