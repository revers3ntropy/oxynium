def Option.none <From> () Option<From> {
	return new Option<From> {
		value: Any.cast!<Int, Ptr<From>>(0)
	}
}

def Option.some <From> (value: From) Option<From> {
	return new Option <From> {
		value: Ptr!<From>.make!<From>(value)
	}
}

def Option.?? (self, value: T) T {
	if self.is_none() {
		return value
	}
	return self.unwrap()
}

def Option.is_some (self) Bool {
	return !self.value.is_null()
}

def Option.is_none (self) Bool {
	return self.value.is_null()
}

def Option.unwrap (self, err_message="Unwrapping None Option") T {
	if self.is_none() {
		panic(err_message)
	}
	return self.value.unwrap()
}

def Option.unwrap_or (self, default_value: T) T {
	if self.is_none() {
		return default_value
	}
	return self.value.unwrap()
}