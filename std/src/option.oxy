def Option.none <From> () -> new Option<From> {
    value: 0,
    is_some: false,
}

def Option.some <From> (value: From) -> new Option <From> {
    value: #unchecked_cast(Int, value),
    is_some: true,
}

def Option.?? (self, value: T) T {
	if self.is_some ->
	    return #unchecked_cast(T, self.value)
	return value
}

def Option.unwrap (self, err_message="Unwrapping None Option") T {
	if !self.is_some ->
		panic(err_message)
	return #unchecked_cast(T, self.value)
}

def Option.or (self, default_value: T) T {
	if !self.is_some ->
		return default_value
	return #unchecked_cast(T, self.value)
}

def Option.is_some_and (self, f: Fn(T) Bool) Bool {
	if self.is_some ->
		return f(#unchecked_cast(T, self.value))
	return false
}