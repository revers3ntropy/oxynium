def List.empty <E> () -> new List<E> {
    head: new Ptr<E>,
    // number of bytes in array after 'head'
    size: 0
}

def List.len (self) Int ->
	// number of elements in list is size of list
	// divided by size of each element,
	// which is always 8 bytes
	self.size / 8

def List.at (self, i: Int) Option<T> {
	if self.len() == 0 ->
		return Option.none!<T>()

	if i < 0 ->
		return self.at(self.len() + i)

	if i < 0 || i >= self.len() ->
		return Option.none!<T>()

	return Option.some!<T>(self.at_raw(i))
}

def List.at_raw (self, i: Int) T {
	return #asm T "
		mov rax, qword [rbp + 16]       ; rax = self
		mov rax, qword [rax]            ; rax = self.head
		mov rcx, qword [rbp + 24]       ; rcx = idx
		mov rax, qword [rax + rcx * 8]  ; rax = self.head[idx]
		push rax
	"
}

def List.push (self, value: T, n=1) {
	if n < 0 -> return
	if n > 1 -> self.push(value, n - 1)

	#asm Void "
		; #1: Allocate space for old list and new element

		mov rax, qword [rbp + 16] ; rax = self
		mov rcx, qword [rax + 8]  ; rdx = self.size
		add rcx, 8 				  ; rdx = self.size + 8
		mov qword [rax + 8], rcx  ; self.size = self.size + 8
		mov rdi, rcx 		      ; self.size + 8
		mov rsi, 1
		call _LibC.calloc         ; rax = allocate((self.size + 1) * 8)

		; #2: Copy old list to new list

		mov rdi, rax ; rdi = new list
		mov rsi, qword [rbp + 16] ; rsi = self
		mov rdx, qword [rsi + 8]  ; rcx = self.size
		mov rsi, qword [rsi]      ; rsi = old_list.head
		sub rdx, 8 			      ; rcx = self.size - 8

		; just before copying, while rsi = old_list.head
		; set the location of the list to the new list
		mov rcx, qword [rbp + 16] ; rcx = self
		mov qword [rcx], rax      ; self.head = new_list

		call _LibC.memcpy    ; memcpy(new list, old list, (old list size - 1) * 8)

		; #3: Add new element to new list

		mov rax, qword [rbp + 16]      ; rax = self
		mov rcx, qword [rax + 8]       ; rcx = self.size
		mov rax, qword [rax]           ; rcx = self.head (new head)
		mov rdx, qword [rbp + 24]      ; rdx = val
		mov qword [rax + rcx - 8], rdx ; new_list[self.len() - 1] = val

		push rax
	"
}

def List.Str (self) ->
	"List[" + self.len().Str() + "]"

def List.set_at (self, idx: Int, val: T) Result<Void, Str> {
	if self.len() == 0 ->
		return Result.err!<Void, Str>("Index out of bounds")

	if idx < 0 ->
		return self.set_at(self.len() + idx, val)

	if idx < 0 || idx >= self.len() ->
		return Result.err!<Void, Str>("Index out of bounds")

	#asm Void "
		mov rax, qword [rbp + 16]      ; rax = self
		mov rax, qword [rax]           ; rax = self.head
		mov rdx, qword [rbp + 24]      ; rdx = idx
		mov rsi, qword [rbp + 32]      ; rsi = val
		mov qword [rax + rdx * 8], rsi ; self.head[idx] = val
	"
	return Result.ok!<Void, Str>(#unchecked_cast(Void, 0))
}

def List.map <To> (self, f: Fn (T, Int) To) List<To> {
	let new_list = List.empty!<To>()
	for item, i in self {
		new_list.push(f(item, i))
	}
	return new_list
}

def List.clone (self) List<T> {
	let new_list = List.empty!<T>()
	for item in self {
		new_list.push(item)
	}
	return new_list
}

def List.concat (self, other: List<T>) List<T> {
	let new_list = self.clone()
	for item in other {
		new_list.push(item)
	}
	return new_list
}

def List.sort (self, f: Fn (T, T) Int) List<T> {
	// quicksort
	if self.len() <= 1 -> return self.clone()
	let pivot = self.at_raw(0)
	let pivot_list = List.empty!<T>()
	pivot_list.push(pivot)
	let left = List.empty!<T>()
	let right = List.empty!<T>()
	for i in range(1, self.len()) {
		let item = self.at_raw(i)
		if f(item, pivot) < 0 -> left.push(item)
		else -> right.push(item)
	}
	// should chain here, but type system is broken :(
	let left_sorted: List<T> = left
		.sort(f)
	let left_and_pivot: List<T> = left_sorted.concat(pivot_list)
	return left_and_pivot.concat(right.sort(f))
}