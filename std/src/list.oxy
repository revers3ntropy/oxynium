def List.empty <E> () -> new List<E> {
	// dangerously use NULL as a pointer to the head of the list,
	// must make sure to check the length of the array before
	// accessing any elements
    head: #unchecked_cast(Ptr<E>, 0),
    length: 0,
    // number of bytes in array after 'head'
    capacity: 0
}

def List.with_capacity <E> (capacity: Int) -> new List<E> {
	head: #unchecked_cast(Ptr<E>, LibC.calloc(capacity, 8)),
	length: 0,
	capacity: capacity
}

// only exists so we conform by the Iterable 'interface'
// which internally requires 'len' and 'at_raw' methods
def List.len (self) Int -> self.length

def List.at (self, i: Int) Option<T> {
	if self.length == 0 ->
		return Option.none!<T>()

	if i < 0 ->
		return self.at(self.length + i)

	if i < 0 || i >= self.length ->
		return Option.none!<T>()

	return Option.some!<T>(self.at_raw(i))
}

def List.at_raw (self, i: Int) T {
	return #asm T "
		mov rax, qword [rbp + 16]       ; rax = self
		mov rax, qword [rax]            ; rax = self.head
		mov rcx, qword [rbp + 24]       ; rcx = idx
		mov rax, qword [rax + rcx * 8]  ; rax = self.head[idx]
		push rax
	"
}

def List.next_capacity (self) Int {
	// if the list is empty, return a default capacity
	if self.capacity == 0 ->
		return 64
	// in the unusual case when doubling the allocated
	// memory would result in fewer elements than we
	// need, just allocate enough memory for the elements
	// (for example if an array was created with
	//  with_capacity(3) and then push() was called)
	if self.capacity * 2 < (self.length + 1) * 8 ->
		return (self.length + 1) * 8
	// by default, double the capacity
	// TODO ideally we would choose a function based on
	//      the size of the elements, but we don't have
	//      access to that information
	return self.capacity * 2
}

def List.push (self, value: T) {
	if self.capacity < (self.length + 1) * 8 ->
		self.reallocate(self.next_capacity())
	#asm Void "
		mov rax, qword [rbp + 16]       ; rax = self
		mov rcx, qword [rax + 8]        ; rax = self.length
		inc qword [rax + 8]             ; self.length += 1
	"
	self.set_at(self.length - 1, value)
		// TODO how should we handle this error?
		.unwrap()
}

def List.Str (self) ->
	// TODO format the array nicely;
	//      although does this require more information
	//      about the type of the elements?
	"List[" + self.length.Str() + "]"

def List.set_at (self, idx: Int, val: T) Result<Void, Str> {
	if self.length == 0 ->
		return Result.err!<Void, Str>("Index out of bounds")

	// we can use negative indices to access elements from the end
	// however cannot access from < -length
	// i.e. -length <= idx < length
	if idx < -self.length ->
		return Result.err!<Void, Str>("Index out of bounds")
	if idx < 0 ->
		return self.set_at(self.length + idx, val)

	if idx >= self.length ->
		return Result.err!<Void, Str>("Index out of bounds")

	#asm Void "
		mov rax, qword [rbp + 16]      ; rax = self
		mov rax, qword [rax]           ; rax = self.head
		mov rdx, qword [rbp + 24]      ; rdx = idx
		mov rsi, qword [rbp + 32]      ; rsi = val
		mov qword [rax + rdx * 8], rsi ; self.head[idx] = val
	"
	return Result.ok!<Void, Str>(#unchecked_cast(Void, 0))
}

def List.map <To> (self, f: Fn (T, Int) To) List<To> {
	let new_list = List.empty!<To>()
	for item, i in self {
		new_list.push(f(item, i))
	}
	return new_list
}

def List.reallocate (self, new_capacity: Int) {
	if new_capacity < self.length * 8 ->
		panic("cannot reallocate List to have fewer elements than it currently has")
	let new_head = LibC.calloc!<T>(new_capacity, 8)
	// only copy up to where we have elements stored
	LibC.memcpy!<T>(new_head, self.head, self.length * 8)
	#asm Void "
		mov rax, qword [rbp + 16]  ; rax = self
		mov rcx, qword [rbp - 8]
		mov qword [rax], rcx       ; self.head = new_head
		mov rcx, qword [rbp + 24]
		mov qword [rax + 16], rcx  ; self.capacity = new_capacity
	"
}

def List.clone (self) List<T> {
	let new_list = List.with_capacity!<T>(self.capacity)
	for item in self {
		new_list.push(item)
	}
	return new_list
}

def List.concat (self, other: List<T>) List<T> {
	let new_list = self.clone()
	new_list.reallocate(self.length * 8 + other.length * 8)
	for item in other {
		new_list.push(item)
	}
	return new_list
}

def List.sort (self, f: Fn (T, T) Int) List<T> {
	// quicksort
	if self.len() <= 1 -> return self.clone()

	let pivot = self.at_raw(0)
	let pivot_list = List.empty!<T>()
	pivot_list.push(pivot)

	let left = List.empty!<T>()
	let right = List.empty!<T>()

	for i in range(1, self.len()) {
		let item = self.at_raw(i)
		if f(item, pivot) < 0 -> left.push(item)
		else -> right.push(item)
	}

	// should chain here, but type system is broken :(
	let left_sorted: List<T> = left
		.sort(f)
	let left_and_pivot: List<T> = left_sorted.concat(pivot_list)
	return left_and_pivot.concat(right.sort(f))
}