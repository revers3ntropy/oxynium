def Result.err <Val, Err> (err: Err) -> new Result<Val, Err> {
    value: #unchecked_cast(Int, err),
    ok: false
}

def Result.ok <Val, Err> (val: Val) -> new Result<Val, Err> {
    value: #unchecked_cast(Int, val),
    ok: true
}


def Result.unwrap (self) T {
	if self.ok ->
	    return #unchecked_cast(T, self.value)
	panic("Tried to unwrap a Result that was an error")
	return #unchecked_cast(T, 0)
}

def Result.Option (self) Option<T> {
    if self.ok ->
        return Option.some!<T>(#unchecked_cast(T, self.value))
    return Option.none!<T>()
}

def Result.error (self) Option<E> {
    if self.ok ->
        return Option.none!<T>()
    return Option.some!<E>(#unchecked_cast(E, self.value))
}
