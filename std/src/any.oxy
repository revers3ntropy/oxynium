func Any.from<From>(val: From) Any {
	return Any.cast!<From, Any>(val)
}

// This is a nasty way to get around the strict type system.
// This is the single point of failure of the reliability
// of the type system: allowing unsafe, unchecked casts.
// However this is effectively required for many of the
// features of the language (especially parts of the std),
// a necessary evil.
func Any.__CAST_WRAPPER_DO_NOT_CALL () {
	#asm "
		Any.cast:
		    push rbp
            mov rbp, rsp
			mov rax, [rbp + 16]
	"
}

func Any.eq <Cmp> (self, other: Cmp) Bool {
	return Any.cast!<Any, Int>(self) == Any.cast!<Cmp, Int>(other)
}

func Any.Str (self) Str {
	return Any.cast!<Any, Int>(self).Str()
}

func Any.to<To>(self) To {
	return Any.cast!<Any, To>(self)
}
