def Str.== (self, other: Str) Bool {
	return Any.cast!<Void, Bool>(#asm "
		mov r14, qword [rbp + 16] ; r14 = lhs
		mov r13, qword [rbp + 24] ; r13 = rhs

		xor rax, rax ; rax = 0 (index)

		.loop:
			mov rcx, qword [r14 + rax * 8] ; lhs[rax]
			mov rdx, qword [r13 + rax * 8] ; rhs[rax]
			cmp rcx, rdx ; lhs[rax] != rhs[rax]
			jne .not_equal

			test rcx, rcx ; lhs[rax] == 0
			jz .are_equal ; lhs[rax] == rhs[rax] == 0

			inc rax ; rax++

			jmp .loop

		.are_equal:
			mov rax, 1
			mov rsp, rbp
			pop rbp
			ret

		.not_equal:
			xor rax, rax
			push rax
	")
}
def Str.!= (self, other: Str) Bool {
	return !(self == other)
}

/// returns a new string that is the concatenation of lhs and rhs
def Str.+ (self, other: Str) Str {
	return Any.cast!<Void, Str>(#asm "
		times 3 push 0             ; space for length of self and other,
								   ; and the new string
		push qword [rbp + 16]      ; self
		call Str.len
		add rsp, 8
		mov qword [rbp - 8], rax   ; [rbp - 8] = self.len()

		push qword [rbp + 24]      ; other
		call Str.len
		add rsp, 8
		mov qword [rbp - 16], rax  ; [rbp - 16] = other.len()

		add rax, qword [rbp - 8]   ; rax = other.len() + self.len()
		inc rax                    ; rax = lhs.len() + rhs.len() + 1 (for null terminator)
		imul rax, 8                ; rax = (lhs.len() + rhs.len() + 1) * 8
		push rax
		call Ptr.allocate       ; rax = malloc((lhs.len() + rhs.len() + 1) * 8)
		add rsp, 8
		mov qword [rbp - 24], rax  ; [rbp - 24] = new string

		mov rdx, qword [rbp - 8]   ; rcx = self.len()
		imul rdx, 8                ; rcx = self.len() * 8
		mov rsi, qword [rbp + 16]  ; rsi = self
		mov rdi, qword [rbp - 24]  ; rdx = new string

		push rbp
		mov rbp, rsp               ; stack is 16-byte aligned
		sub rsp, 32
		and rsp, -16
		call memcpy WRT ..plt      ; memcpy(new string, self, self.len() * 8)
		mov rsp, rbp
		pop rbp

		mov rdx, qword [rbp - 16]  ; rcx = other.len()
		imul rdx, 8                ; rcx = other.len() * 8
		mov rsi, qword [rbp + 24]  ; rsi = other
		mov rdi, qword [rbp - 24]  ; rdx = new string
		mov rax, qword [rbp - 8]   ; rax = other.len()
		imul rax, 8                ; rax = other.len() * 8
		add rdi, rax               ; rdx = new string + other.len() * 8

		push rbp
		mov rbp, rsp               ; stack is 16-byte aligned
		sub rsp, 32
		and rsp, -16
		call memcpy WRT ..plt      ; memcpy(new string, other, other.len() * 8)
		mov rsp, rbp
		pop rbp

		mov rax, qword [rbp - 24]  ; rax = new string
		push rax
	")
}

def Str.Str (self) Str {
	return self
}

def Str.Utf8Str (self) Utf8Str {
	if self.utf8_size() == 0 {
		return Any.cast!<Str, Utf8Str>("")
	}
	let res = Ptr.allocate!<Char>(self.utf8_size())
	#asm "
		mov r15, qword [rbp + 16] ; r15 = self

		push r15
		call Str.len
		pop r15

		mov rdx, rax ; rdx = number of characters
		imul rdx, 8  ; rdx = index of last byte
		add rdx, r15 ; rdx = pointer to last byte

		mov r14, qword [rbp - 8]  ; r14 = res

		xor rax, rax
		dec r15
		.loop:
			inc r15
			cmp r15, rdx
			jg .end
			cmp byte [r15], 0
			je .loop

			mov cl, byte [r15]
			mov byte [r14 + rax], cl

			inc rax

			jmp .loop

		.end:
	"
	return Any.cast!<Ptr<Char>, Utf8Str>(res)
}

def Str.at (self, i: Int) Char {
	return Any.cast!<Void, Char>(#asm "
		mov rdx, qword [rbp + 16] ; pop string
		mov r15, qword [rbp + 24] ; pop index

		cmp r15, 0
		jl .backwards

		xor rax, rax ; character
		xor rcx, rcx ; index

		.loop:
			mov rax, qword [rdx]
			test rax, rax
			je .end
			add rdx, 8

			cmp rcx, r15
			jge .end

			inc rcx
			jmp .loop

		.backwards:
			neg r15
			mov r14, rdx

			push rdx
			call Str.len
			pop rdx
			imul rax, 8
			add rdx, rax ; rdx = end of string + 1

			imul r15, 8
			sub rdx, r15 ; rdx = end of string - index
			cmp rdx, r14 ; if rdx < r14, index is out of bounds
			jl .end_and_clear

			mov rax, qword [rdx]
			jmp .end

		.end_and_clear:
			xor rax, rax
		.end:
			push rax
	")
}

/// Returns the character at the given index
/// Does not check if index is out of bounds
def Str.at_raw (self, i: Int) Char {
	return Any.cast!<Void, Char>(#asm "
		mov rdx, qword [rbp + 16]  ; self
		mov r15, qword [rbp + 24]  ; index

		mov rax, qword [rdx + r15 * 8]
		push rax
	")
}

def Str.concat (self, other: Str) Str {
	return self + other
}

def Str.contains (self, other: Str) Bool {
	return self.find(other) >= 0
}

def Str.find (self, other: Str) Int {
	if other.len() == 0 {
		return 0
	}
	let mut i = 0
	while i < self.len() {
		if self.at(i) == other.at(0) {
			let mut j = 1
			while j < other.len() && self.at(i + j) == other.at(j) {
				j += 1
			}
			if j == other.len() {
				return i
			}
		}
		i += 1
	}
	return -1
}

def Str.len (self) Int {
	return Any.cast!<Void, Int>(#asm "
		mov rdx, qword [rbp + 16] ; pop string

		xor rax, rax ; string length

		; find length of string
		_$_Str.len_find_length:
			mov rcx, qword [rdx]
			test rcx, rcx
			je _$_Str.len_end
			inc rax
			add rdx, 8
			jmp _$_Str.len_find_length

		_$_Str.len_end:
			push rax
	")
}

def Str.repeat (self, n: Int) Str {
	if n < 1 {
		return ""
	}
	// TODO: implement in assembly to make fast
	return self + self.repeat(n - 1)
}

def Str.substr (self, start = 0, end = 9223372036854775807) Str {
		// TODO: give the end a proper default value.
		// This will work in all cases (end = 2^63-1 = max Int),
		// but it's not pretty.
	if self.len() < 1 {
		return ""
	}
	if end < 0 {
		return self.substr(start, Int.max(self.len() + end, 0))
	}
	if start < 0 {
		return self.substr(Int.max(self.len() + start, 0), end)
	}
	if start >= end {
		return ""
	}
	let actual_end = Int.min(self.len(), end)
	let mut i = Int.max(start, 0)
	let mut s = ""
	while i < actual_end {
		// use Str.at_raw here as bounds checking has already been done
		// and we don't want to do it again every iteration
		s += self.at_raw(i).Str()
		i += 1
	}
	return s
}

def Str.starts_with (self, other: Str) Bool {
	if other.len() > self.len() {
		return false
	}
	let mut i = 0
	while i < other.len() {
		if self.at(i) != other.at(i) {
			return false
		}
		i = i + 1
	}
	return true
}

def Str.ends_with (self, other: Str) Bool {
	if other.len() > self.len() {
		return false
	}
	let mut i = 0
	while i < other.len() {
		if self.at(self.len() - i - 1) != other.at(other.len() - i - 1) {
			return false
		}
		i += 1
	}
	return true
}

def Str.reversed (self) Str {
	let mut i = 0
	let mut s = ""
	while i < self.len() {
		s = self.at(i).Str() + s
		i += 1
	}
	return s
}

def Str.replace (self, search: Str, replace_with="", max=-1) Str {
	if search.len() == 0 {
		return self
	}
	if max == 0 {
		return self
	}
	let mut i = 0
	let mut s = ""
	let mut replacements = 0
	while i < self.len() {
		if self.at(i) == search.at(0) {
			let mut j = 1
			while j < search.len() && self.at(i + j) == search.at(j) {
				j += 1
			}
			if j == search.len() {
				s += replace_with
				i += j
				replacements = replacements + 1
				if max >= 0 && replacements >= max {
					s += self.substr(i)
					break
				}
				continue
			}
		}
		s += self.at(i).Str()
		i += 1
	}
	return s
}

def Str.insert (self, index: Int, other: Str) Str {
	if index < 0 {
		return self.insert(self.len() + index + 1, other)
	}
	if index >= self.len() {
		return self + other
	}
	return self.substr(0, index) + other + self.substr(index)
}

def Str.remove (self, index: Int, count=1) Str {
	if index < 0 {
		if self.len() + index < 0 {
			return self.substr(self.len() + index + count)
		}
		return self.remove(self.len() + index, count)
	}
	if index >= self.len() {
		return self
	}
	if count < 1 {
		return self
	}
	return self.substr(0, index) + self.substr(index + count)
}

def Str.utf8_size (self) Int {
	return Any.cast!<Void, Int>(#asm "
		mov r15, qword [rbp + 16]

		push r15
		call Str.len
		pop r15

		mov rdx, rax ; rdx = number of characters
		imul rdx, 8  ; rdx = index of last byte
		add rdx, r15 ; rdx = pointer to last byte

		xor rax, rax
		dec r15
		.loop:
			inc r15
			cmp r15, rdx
			jg .end
			cmp byte [r15], 0
			je .loop
			inc rax
			jmp .loop

		.end:
			push rax
	")
}

def Str.Int (self) Result<Int, Str> {
	let n = self.len()
	if n == 0 {
		return Result.err!<Int, Str>("empty string")
	}

	let mut i = 0
	let mut sign = 1
	if self.at(0).Str() == "-" {
		sign = -1
		i += 1
	}

	let zero = "0".at(0).Int()
	let nine = "9".at(0).Int()

	let mut result: Int = 0
	while i < n {
		let c = self.at(i).Int()
		if c < zero || c > nine {
			return Result.err!<Int, Str>("invalid character")
		}
		result = result * 10 + (c - zero)
		i += 1
		if result < 0 {
			return Result.err!<Int, Str>("overflow")
		}
	}

	return Result.ok!<Int, Str>(result * sign)
}