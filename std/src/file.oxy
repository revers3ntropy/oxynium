def File.open (path: Str, mode: Str) Option<File> {
	let f = #asm "
		; FILE* fopen(const char* path, const char* mode);

		push qword [rbp + 16] ; path
		call Str.Utf8Str
		add rsp, 8

		push rax

		push qword [rbp + 24] ; mode
		call Str.Utf8Str
		add rsp, 8

		pop rdi
		mov rsi, rax

		push rbp
		mov rbp, rsp
		sub rsp, 32
		and rsp, -16
		call fopen WRT ..plt
		mov rsp, rbp
		pop rbp

		push rax
	";

	if Any.cast!<Void, Int>(f) == 0 {
		return Option.none!<File>();
	}

	return Option.some!<File>(new File {
		path,
		mode,
		handle: Any.cast!<Void, Ptr<Any>>(f)
	});
}

def File.is_open (self) Bool {
	return !self.handle.is_null();
}

def File.read_to_str (self) Str {
	// src: https://stackoverflow.com/questions/14002954

	//  fseek(f, 0, SEEK_END);
	//  long fsize = ftell(f);
	//  fseek(f, 0, SEEK_SET);  /* same as rewind(f); */
	//
	//  char *string = malloc(fsize + 1);
	//  fread(string, fsize, 1, f);
	//
	// string[fsize] = 0;

	let _f = self.handle;

	return Any.cast!<Void, Str>(#asm "
		mov rdi, [rbp - 8] ; rdi = f

		sub rsp, 32
		mov qword [rsp + 16], 0    ; [rsp + 16] = string
		mov qword [rsp + 8], rdi   ; [rsp + 8]  = save f
		mov qword [rsp], 0         ; [rsp]      = space for fsize

		mov rsi, 0
		mov rdx, 2
		mov rax, rdi

		push rbp             ; align stack for 16 byte boundary
		mov rbp, rsp         ; for libc calls
		sub rsp, 32
		and rsp, -16
		call fseek WRT ..plt
		mov rsp, rbp        ; escape libc call alignment
		pop rbp

		mov rdi, [rsp + 8]   ; rdi = f
		mov rsi, 0
		mov rdx, 0
		mov rax, rdi

		push rbp
		mov rbp, rsp
		sub rsp, 32
		and rsp, -16
		call ftell WRT ..plt
		mov rsp, rbp
		pop rbp

		mov [rsp], rax       ; save fsize

		mov rdi, [rsp + 8]   ; rdi = f
		mov rsi, 0
		mov rdx, 0

		push rbp
		mov rbp, rsp
		sub rsp, 32
		and rsp, -16
		call fseek WRT ..plt
		mov rsp, rbp
		pop rbp

		mov rdi, [rsp]       ; rdi = fsize
		add rdi, 1
		push rdi

		call Ptr.allocate
		add rsp, 8

		mov [rsp + 16], rax ; save string

		mov rdi, rax 	    ; rdi = string
		mov rsi, [rsp]      ; rsi = fsize
		mov rdx, 1
		mov rcx, [rsp + 8]  ; rcx = f

		push rbp
		mov rbp, rsp
		sub rsp, 32
		and rsp, -16
		call fread WRT ..plt
		mov rsp, rbp
		pop rbp

		mov rdi, [rsp + 16] ; rdi = string
		mov rsi, [rsp]      ; rsi = fsize

		mov byte [rdi + rsi], 0  ; string[fsize] = 0

		push qword [rsp + 16]
		call Utf8Str.Str

		push rax
	")
}

def File.close (self) {
	let _f = self.handle;

	#asm "
		mov rdi, [rbp - 8] ; rdi = self.handle

		push rbp
		mov rbp, rsp
		sub rsp, 32
		and rsp, -16
		call fclose WRT ..plt
		mov rsp, rbp
		pop rbp

		mov rax, qword [rbp + 16]  ; rax = self
		mov qword [rax], 0         ; self.handle = 0
	"
}

def File.write (self, data: Str) {
	let _ = self.handle;

	#asm "
		mov rdi, [rbp + 24] ; rdi = data

		push rdi
		call Str.utf8_size
		pop rdi

		push rax

		push rdi
		call Str.Utf8Str
		add rsp, 8
		mov rdi, rax       ; rdi = data.Utf8Str()
		mov rsi, 1         ; rsi = 1
		pop rdx            ; rdx = data.utf8_size()
		mov rcx, [rbp - 8] ; rcx = self.handle

		push rbp
		mov rbp, rsp
		sub rsp, 32
		and rsp, -16
		call fwrite WRT ..plt
		mov rsp, rbp
		pop rbp
	"
}