def Int.+ (self, n: Int) Int {
	return #asm Int "
		mov rax, qword [rbp + 16]
		add rax, qword [rbp + 24]
		push rax
	"
}

def Int.- (self, n: Int) Int {
	return #asm Int "
		mov rax, qword [rbp + 16]
		sub rax, qword [rbp + 24]
		push rax
	"
}

def Int.* (self, n: Int) Int {
	return #asm Int "
		mov rax, qword [rbp + 16]
		imul rax, qword [rbp + 24]
		push rax
	"
}

def Int./ (self, n: Int) Int {
	return #asm Int "
		mov rax, qword [rbp + 16]
		cqo
		idiv qword [rbp + 24]
		push rax
	"
}

def Int.% (self, n: Int) Int {
	return #asm Int "
		mov rax, qword [rbp + 16]
		cqo
		idiv qword [rbp + 24]
		push rdx
	"
}

def Int.== (self, n: Int) Bool {
	return #asm Bool "
		xor rax, rax
		mov rcx, qword [rbp + 16]
		cmp rcx, qword [rbp + 24]
		sete al
		push rax
	"
}

def Int.!= (self, n: Int) Bool ->
	!(self == n)

def Int.< (self, n: Int) Bool {
	return #asm Bool "
		xor rax, rax
		mov rcx, qword [rbp + 16]
		cmp rcx, qword [rbp + 24]
		setl al
		push rax
	"
}

def Int.<= (self, n: Int) Bool ->
	self < n || self == n

def Int.> (self, n: Int) Bool {
	return #asm Bool "
		xor rax, rax
		mov rcx, qword [rbp + 16]
		cmp rcx, qword [rbp + 24]
		setg al
		push rax
	"
}

def Int.>= (self, n: Int) Bool ->
	self > n || self == n

def Int.max (self, other = 9223372036854775807) Int {
	if self > other -> return self
	return other
}

def Int.min (self, other = -9223372036854775807 - 1) Int {
	if self < other -> return self
	return other
}

def Int.abs (self) Int {
	if self < 0 -> return -self
	return self
}

def Int.Str (self) Str {
	// https://stackoverflow.com/questions/8257714
	return #asm Str "
		; allocate string
		mov rdi, 8 ; 64 bytes, much larger than needed
		mov rsi, 8
		call _LibC.calloc

		mov r15, rax ; save char*
		; write string to allocated memory using
		; `sprintf(buf, \"%lld\", n)`
		mov rdi, rax
		lea rsi, [rel _$_sprintf_Int_str]
		mov rdx, qword [rbp + 16]
		mov rax, 0
		mov rcx, rsi
		mov r8, 0
		mov r9, 0
		call _LibC.sprintf

		mov rax, r15

		push rax
		call Utf8Str.Str
		pop rdi
		push rax
	"
}

def Int.Bool (self) Bool ->
    self != 0

def Int.compare (self, other: Int) Int {
	if self < other -> return -1
	if self > other -> return 1
	return 0
}