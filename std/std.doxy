// This file is included as a raw string in every Oxynium program
// and contains the declarations for the Standard Library.
// The implementations for these functions can be found under std/src.

primitive Void;

primitive Char {
    extern fn == (self, other: Char) Bool,
    extern fn != (self, other: Char) Bool,
    extern fn str (self) Str,
    extern fn is_digit (self) Bool,
    extern fn as_int (self) Int,
    extern fn from_int (i: Int) Char,
}

primitive Bool {
    extern fn || (self, other: Bool) Bool,
    extern fn && (self, other: Bool) Bool,
    extern fn str (self) Str,
}

primitive Int {
    extern fn +  (self, n: Int) Int,
    extern fn -  (self, n: Int) Int,
    extern fn *  (self, n: Int) Int,
    extern fn /  (self, n: Int) Int,
    extern fn %  (self, n: Int) Int,
    extern fn == (self, n: Int) Bool,
    extern fn != (self, n: Int) Bool,
    extern fn <  (self, n: Int) Bool,
    extern fn <= (self, n: Int) Bool,
    extern fn >  (self, n: Int) Bool,
    extern fn >= (self, n: Int) Bool,
    extern fn max (self, other=9223372036854775807) Int,
    extern fn min (self, other=-9223372036854775807-1) Int,
    extern fn abs (self) Int,
    extern fn str (self) Str,
}

class Str {
    extern fn == (self, other: Str) Bool,
    extern fn != (self, other: Str) Bool,
    /// returns a new string that is the concatenation of lhs and rhs
    extern fn +  (self, other: Str) Str,
    extern fn at (self, i: Int) Char,
    /// Returns the character at the given index
    /// Does not check if index is out of bounds
    extern fn at_raw (self, i: Int) Char,
    extern fn concat (self, other: Str) Str,
    extern fn contains (self, other: Str) Bool,
    extern fn find (self, other: Str) Int,
    extern fn len (self) Int,
    extern fn repeat (self, n: Int) Str,
    extern fn str (self) Str,
    extern fn substr (self, start=0, end=9223372036854775807) Str,
    extern fn starts_with (self, other: Str) Bool,
    extern fn ends_with (self, other: Str) Bool,
    extern fn reversed (self) Str,
    extern fn replace (self, search: Str, replace_with="", max=-1) Str,
    extern fn insert (self, index: Int, other: Str) Str,
    extern fn remove (self, index: Int, count = 1) Str,
    extern fn utf8_size (self) Int,
    /// converts utf8 to utf64, the encoding used by Str
    extern fn from_utf8 (utf8: Str) Str,
}

class Time {
	seconds: Int,
	microseconds: Int,
	extern fn - (self, other: Time) Time,
	extern fn + (self, other: Time) Time,
	extern fn str (self) Str,
	/// returns the current time in seconds from the UNIX epoch
	extern fn current_seconds () Int,
	extern fn current_microseconds () Int,
	extern fn now () Time,
	extern fn epoch () Time,
}

class Option <T> {
	value: Ptr<T>,
	extern fn none <From> () Option<From>,
	extern fn some <From> (value: From) Option<From>,
	extern fn is_some (self) Bool,
	extern fn is_none (self) Bool,
	extern fn unwrap (self, err_message="Unwrapping None Option") T,
}

class Any <T> {
	val: T,
	extern fn from<From>(val: From) Any<From>,
	extern fn cast <From, To> (val: From) To,
	extern fn eq <Cmp> (self, other: Cmp) Bool,
	extern fn str (self) Str,
	extern fn to<To>(self) To,
}

primitive Ptr <T> {
	extern fn is_null (self) Bool,
	extern fn make <From> (val: From) Ptr<From>,
	extern fn unwrap (self) T,
	/// Wrapper around `malloc`
	extern fn allocate <A> (size: Int) Ptr<A>,
}

class List <T> {
	// address of first element
	head: Ptr<T>,
	// number of bytes required to store list
    size: Int,
    extern fn empty <E> () List<E>,
	extern fn len (self) Int,
    extern fn at (self, i: Int) Option<T>,
    extern fn at_raw (self, i: Int) T,
    extern fn push (self, value: T),
}

class Result<T, E> {
	value: Option<T>,
	error: Option<E>,
	extern fn err <Val, Err> (err: Err) Result<Val, Err>,
	extern fn is_ok (self) Bool,
	extern fn is_err (self) Bool,
	extern fn unwrap (self) T,
}

class File {
	extern fn open (path: Str, mode: Str, encoding="utf-8") File,
	extern fn read (self, size: Int) Str,
	extern fn write (self, data: Str),
	extern fn close (self),
	extern fn is_open (self) Bool
}

/// Reads from stdin until a newline is reached
/// allocates string to heap to fit input
/// returns pointer to string in rax
extern fn input (prompt="", buffer_size=1000) Str;
extern fn exit (code: Int = 0);
extern fn print (msg: Str);
extern fn println (msg: Str, line_end="\n");
extern fn panic (msg: Str);

// Classes that may become part of the standard library in the future

class Instant;
class Duration;
class Map;
class Filter;
class Iter;
class Range;
class Slice;
class Vec;
class Set;
class Tuple;
class Path;
class Thread;
class Process;
class Channel;
class Collection;
class Default;
class Debug;
class Display;
class Error;
class Hash;
class Hint;
class Net;
class Ref;
class Primitive;
class Task;
class Fn;
