class Void;

primitive Char {
    extern fn str(self): Str
}

primitive Bool {
    fn str(self): Str {
        if self {
            return "true"
        }
        return "false"
    }
}

primitive Int {
    extern fn str(self): Str,
    fn max(self, other: Int): Int {
        if self > other {
            return self
        }
        return other
    }
    fn min(self, other: Int): Int {
        if self < other {
            return self
        }
        return other
    }
    fn + (self, other: Int): Int {
        return 1
    }
    extern fn - (self, other: Int): Int,
    extern fn * (self, other: Int): Int,
    extern fn / (self, other: Int): Int,
    extern fn % (self, other: Int): Int,
    extern fn == (self, other: Int): Bool,
    extern fn != (self, other: Int): Bool,
    extern fn < (self, other: Int): Bool,
    extern fn <= (self, other: Int): Bool,
    extern fn > (self, other: Int): Bool,
    extern fn >= (self, other: Int): Bool
}

class Str {
    fn str(self): Str {
        return self
    }
    extern fn at(self, i: Int): Char,
    extern fn len(self): Int
}

extern fn print(msg: Str): Void;
fn println(msg: Str, line_end="\n"): Void {
    print(msg);
    print(line_end)
}
extern fn print_nl(): Void;
extern fn exit(code: Int = 0): Void;
extern fn input(prompt: Str = "", buffer_size: Int = 1000): Str
