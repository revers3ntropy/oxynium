// This file is included as a raw string in every Oxynium program
// and contains the declarations for the Standard Library.
// The implementations for these definitions can be found under std/src.

primitive Void

primitive Char {
    extern def == (self, other: Char) Bool,
    extern def != (self, other: Char) Bool,
    extern def Str (self) Str,
    extern def is_digit (self) Bool,
    extern def Int (self) Int,
    extern def from_int (i: Int) Char,
}

primitive Bool {
    extern def || (self, other: Bool) Bool,
    extern def && (self, other: Bool) Bool,
    extern def Str (self) Str,
}

primitive Int {
    extern def +  (self, n: Int) Int,
    extern def -  (self, n: Int) Int,
    extern def *  (self, n: Int) Int,
    extern def /  (self, n: Int) Int,
    extern def %  (self, n: Int) Int,
    extern def == (self, n: Int) Bool,
    extern def != (self, n: Int) Bool,
    extern def <  (self, n: Int) Bool,
    extern def <= (self, n: Int) Bool,
    extern def >  (self, n: Int) Bool,
    extern def >= (self, n: Int) Bool,
    extern def Str (self) Str,
    extern def max (self, other=9223372036854775807) Int,
    extern def min (self, other=-9223372036854775807-1) Int,
    extern def abs (self) Int,
    extern def from_str (s: Str) Result<Int, Str>,
}

class Str {
    /// converts utf8 to utf64, the encoding used by Str
    extern def == (self, other: Str) Bool,
    extern def != (self, other: Str) Bool,
    /// returns a new string that is the concatenation of lhs and rhs
    extern def +  (self, other: Str) Str,
	extern def Str (self) Str,
	extern def Int (self) Result<Int, Str>,
	extern def Utf8Str (self) Utf8Str,
    extern def at (self, i: Int) Char,
    /// Returns the character at the given index
    /// Does not check if index is out of bounds
    extern def at_raw (self, i: Int) Char,
    extern def concat (self, other: Str) Str,
    extern def contains (self, other: Str) Bool,
    extern def find (self, other: Str) Int,
    extern def len (self) Int,
    extern def repeat (self, n: Int) Str,
    extern def substr (self, start=0, end=9223372036854775807) Str,
    extern def starts_with (self, other: Str) Bool,
    extern def ends_with (self, other: Str) Bool,
    extern def reversed (self) Str,
    extern def replace (self, search: Str, replace_with="", max=-1) Str,
    extern def insert (self, index: Int, other: Str) Str,
    extern def remove (self, index: Int, count = 1) Str,
    extern def utf8_size (self) Int,
}

class Utf8Str {
    extern def Str (self) Str,
}

class Time {
	seconds: Int,
	microseconds: Int,
	extern def - (self, other: Time) Time,
	extern def + (self, other: Time) Time,
	extern def Str (self) Str,
	/// returns the current time in seconds from the UNIX epoch
	extern def current_seconds () Int,
	extern def current_microseconds () Int,
	extern def now () Time,
	extern def epoch () Time,
}

class Option <T> {
	value: Ptr<T>,
	extern def ?? (self, other: T) T,
	extern def none <From> () Option<From>,
	extern def some <From> (value: From) Option<From>,
	extern def is_some (self) Bool,
	extern def is_none (self) Bool,
	extern def unwrap (self, err_message="Unwrapping None Option") T,
	extern def unwrap_or (self, default: T) T,
}

primitive Any {
	extern def cast <From, To> (val: From) To,
	extern def __CAST_WRAPPER_DO_NOT_CALL (),
	extern def from <From> (val: From) Any,
	extern def to <To> (self) To,
}

primitive Ptr <T> {
	extern def Str (self) Str,
	extern def is_null (self) Bool,
	extern def make <From> (val: From) Ptr<From>,
	extern def unwrap (self) T,
	/// Wrapper around `malloc`
	extern def allocate <A> (size: Int) Ptr<A>,
}

class List <T> {
	// address of first element
	head: Ptr<T>,
	// number of bytes required to store list
    size: Int,
    extern def Str (self) Str,
    extern def empty <E> () List<E>,
	extern def len (self) Int,
    extern def at (self, i: Int) Option<T>,
    extern def at_raw (self, i: Int) T,
    extern def push (self, value: T),
    extern def set_at (self, i: Int, value: T) Result<Void, Str>,
}

class Result <T, E> {
	value: Option<T>,
	error: Option<E>,
	extern def err <Val, Err> (err: Err) Result<Val, Err>,
	extern def ok <Val, Err> (val: Val) Result<Val, Err>,
	extern def is_ok (self) Bool,
	extern def is_err (self) Bool,
	extern def unwrap (self) T,
}

class File {
	handle: Ptr<Any>,
	path: Str,
	mode: Str,
	extern def open (path: Str, mode="r") Option<File>,
	extern def read_to_str (self, buffer_size=1000) Str,
	extern def write (self, data: Str),
	extern def close (self),
	extern def is_open (self) Bool,
}

/// Reads from stdin until a newline is reached
/// allocates string to heap to fit input
/// returns pointer to string in rax
extern def input (prompt="", buffer_size=1000) Str
extern def exit (code=0)
extern def print (msg="", line_end="\n")
extern def panic (msg="Panic!")
extern def errno () Int

// Libc dependencies - declared externally in asm
extern def malloc()
extern def memset()
extern def memcpy()
extern def free()
extern def sprintf()
extern def time()
extern def fopen()
extern def fseek()
extern def fclose()
extern def fread()
extern def ftell()
extern def __errno_location()

// Classes that may become part of the standard library in the future

class Instant
class Duration
class Map
class Filter
class Iter
class Range
class Slice
class Vec
class Set
class Tuple
class Path
class Thread
class Process
class Channel
class Collection
class Default
class Debug
class Display
class Error
class Hash
class Hint
class Net
class Ref
class Primitive
class Task
class Func
class Class
class Instance
class LibC
class Def
class Rc
class Mem
class Marker
class Test
class Dyn
class Unsafe