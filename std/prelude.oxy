// prelude.oxy
// This file is included at the start of every Oxynium program
// and contains the declarations for the Standard Library (STD).
// The implementations for these definitions can be found under `/std/src`.

primitive Void

primitive Char {
    extern def from_int (i: Int) Char,

    extern def == (self, other: Char) Bool,
    extern def != (self, other: Char) Bool,
    extern def Str (self) Str,
    extern def Int (self) Int,
    extern def is_digit (self) Bool,
    extern def is_alphabetic (self) Bool,
    extern def is_uppercase (self) Bool,
	extern def is_lowercase (self) Bool,
    extern def is_alphanumeric (self) Bool,
    extern def is_ascii (self) Bool,
    extern def is_whitespace (self) Bool,
}

primitive Bool {
    extern def || (self, other: Bool) Bool,
    extern def && (self, other: Bool) Bool,
    extern def Str (self) Str,
}

primitive Int {
    extern def +  (self, n: Int) Int,
    extern def -  (self, n: Int) Int,
    extern def *  (self, n: Int) Int,
    extern def /  (self, n: Int) Int,
    extern def %  (self, n: Int) Int,
    extern def == (self, n: Int) Bool,
    extern def != (self, n: Int) Bool,
    extern def <  (self, n: Int) Bool,
    extern def <= (self, n: Int) Bool,
    extern def >  (self, n: Int) Bool,
    extern def >= (self, n: Int) Bool,
    extern def Str (self) Str,
    extern def Bool (self) Bool,
    extern def max (self, other=9223372036854775807) Int,
    extern def min (self, other=-9223372036854775807-1) Int,
    extern def abs (self) Int,
    extern def compare (self, other: Int) Int,
}

class Str {
    /// converts utf8 to utf64, the encoding used by Str
    extern def == (self, other: Str) Bool,
    extern def != (self, other: Str) Bool,
    /// returns a new string that is the concatenation of lhs and rhs
    extern def +  (self, other: Str) Str,
	extern def Str (self) Str,
	extern def Int (self) Result<Int, Str>,
	extern def Utf8Str (self) Utf8Str,
	// called by `.split("")`
	extern def List (self) List<Char>,
	extern def List_strings (self) List<Str>,
    extern def at (self, i: Int) Option<Char>,
    /// Returns the character at the given index
    /// Does not check if index is out of bounds
    extern def at_raw (self, i: Int) Char,
    extern def concat (self, other: Str) Str,
    extern def contains (self, other: Str) Bool,
    extern def find (self, other: Str) Int,
    extern def len (self) Int,
    extern def repeat (self, n: Int) Str,
    extern def substr (self, start=0, end=9223372036854775807) Str,
    extern def starts_with (self, other: Str) Bool,
    extern def ends_with (self, other: Str) Bool,
    extern def reversed (self) Str,
    extern def replace (self, search: Str, replace_with="", max=-1) Str,
    extern def insert (self, index: Int, other: Str) Str,
    extern def remove (self, index: Int, count = 1) Str,
    extern def utf8_size (self) Int,
    extern def split (self, delimiter="") List<Str>,
}

class Utf8Str {
    extern def Str (self) Str,
}

class Time {
	seconds: Int,
	microseconds: Int,

    /// returns the current time in seconds from the UNIX epoch
    extern def current_seconds () Int,
    extern def current_microseconds () Int,
    extern def now () Time,
    extern def epoch () Time,

	extern def - (self, other: Time) Time,
	extern def + (self, other: Time) Time,
	extern def Str (self) Str,
}

class Option <T> {
	value: Int,
	is_some: Bool,

    extern def none <From> () Option<From>,
    extern def some <From> (value: From) Option<From>,

	extern def ?? (self, other: T) T,
	extern def unwrap (self, err_message="Unwrapping None Option") T,
	extern def map <U> (self, f: Fn(T) U) Option<U>,
	extern def or (self, default: T) T,
	extern def is_some_and(self, f: Fn(T) Bool) Bool,
}

class Result <T, E> {
	value: Int,
	ok: Bool,

	extern def err <Val, Err> (err: Err) Result<Val, Err>,
	extern def ok <Val, Err> (val: Val) Result<Val, Err>,

	extern def Option (self) Option<T>,
	extern def unwrap (self) T,
	extern def error (self) Option<E>,
}

primitive Ptr <T> {
	extern def make <From> (val: From) Ptr<From>,

	extern def Str (self) Str,
	extern def is_null (self) Bool,
	extern def unwrap (self) T,
}

class List <T> {
	// address of first element
	head: Ptr<T>,
	// number of elements in the list
	length: Int,
	// number of bytes required to store list
	// capacity >= length * 8
    capacity: Int,

    extern def empty <E> () List<E>,
    extern def with_capacity <E> (capacity: Int) List<E>,

    extern def Str (self) Str,
	extern def len (self) Int,
    extern def at (self, i: Int) Option<T>,
    extern def at_raw (self, i: Int) T,
    extern def next_capacity (self) Int,
    extern def push (self, value: T),
    extern def set_at (self, i: Int, value: T) Result<Void, Str>,
	extern def map <To> (self, f: Fn(T, Int) To) List<To>,
	extern def concat (self, other: List<T>) List<T>,
	extern def reallocate (self, new_capacity: Int),
	extern def clone (self) List<T>,
	extern def sort(self, f: Fn(T, T) Int) List<T>,
	extern def filter(self, f: Fn(T) Bool) List<T>,
}

class File {
	handle: Ptr<Void>,
	path: Str,
	mode: Str,

	extern def open (path: Str, mode="r") Option<File>,
	extern def read (path: Str) Option<Str>,

	extern def read_to_str (self) Str,
	extern def write (self, data: Str),
	extern def close (self),
	extern def is_open (self) Bool,
}

// uses the minimum integer as a sentinel value,
// as calling range with negative parameters is undefined
// behaviour anyway
extern def range (start: Int, end=0.min(), step=0.min()) Range

class Range {
	start: Int,
	end: Int,
	step: Int,

	extern def List (self) List<Int>,
	extern def Str(self) Str,
	extern def len (self) Int,
	extern def at_raw (self, i: Int) Int,
}

/// Wrappers around some LibC functions so that arguments can be passed
/// correctly, as Oxynium passes all arguments on the stack whereas
/// libc functions expect arguments in registers
class LibC {
    extern def calloc <T> (num: Int, size: Int) Ptr<T>,
    extern def free <T> (ptr: Ptr<T>),
    extern def memcpy <T> (dest: Ptr<T>, src: Ptr<T>, size: Int),
}

class _Syscall {
    extern def out (),
    extern def input (),
    extern def exit (),
    extern def microseconds (),
}

/// Lightweight wrappers around LibC function for faster
/// calling from inline assembly - caller sets registers
class _LibC {
    extern def calloc (),
    extern def memcpy (),
    extern def free (),
    extern def sprintf (),
    extern def time (),
    extern def fopen (),
    extern def fseek (),
    extern def fread (),
    extern def ftell (),
    extern def fclose (),
    extern def fwrite (),
}

/// Reads from stdin until a newline is reached
/// allocates string to heap to fit input
/// returns pointer to string in rax
extern def input (prompt="", buffer_size=1000) Str
extern def exit (code=0)
extern def print (msg="", line_end="\n")
extern def panic (msg="Panic!")

// Libc dependencies - declared externally in asm
// declared here so that you cannot redeclare them,
// should be called through the LibC class
extern def malloc ()
extern def memset ()
extern def memcpy ()
extern def free ()
extern def sprintf ()
extern def time ()
extern def fopen ()
extern def fseek ()
extern def fclose ()
extern def fread ()
extern def ftell ()

// symbols that may become part of the standard library in the future

class Std
class std
class Instant
class Duration
class Filter
class Iter
class Iterator
class Stream
class Slice
class Hash
class HashMap
class Map
class Vec
class Array
class String
class Collection
class Set
class Tuple
class Path
class Task
class Thread
class Process
class Channel
class Default
class Display
class Debug
class Error
class Hint
class Annotation
class Net
class Http
class Https
class Primitive
class Class
class Struct
class Instance
class Def
class Ref
class Rc
class Box
class Mem
class Marker
class Dyn
class Unsafe
class Test
