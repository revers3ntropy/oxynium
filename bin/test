#!/bin/bash

GREEN="\033[0;32m"
RED='\033[0;31m'
ORANGE='\033[0;33m'
NC='\033[0m'

fails=0
warnings=0
tests=0

current_spec_name=""
current_spec_num_tests=0
current_spec_has_failed=0
current_spec_file=""
tests_started=0

filter="$1"

ulimit -c unlimited

function run_cargo_tests {
    cargo test
    # exit if tests failed
    if [ $? -ne 0 ]; then
        printf "$RED Tests failed $NC\n"
        exit 1
    fi
}

function setup () {
  cargo build -r
  bin/compile_std
}

function describe () {
    if [ $tests_started -eq 1 ]; then
        if [ "$current_spec_has_failed" -eq 0 ]; then
            if [ "$filter" == "" ] || [[ "$current_spec_name" == *"$filter"* ]]; then
                printf "${GREEN}✔${NC} %s\n" "$current_spec_name"
            fi
        fi
    fi
    current_spec_name="$1"
    current_spec_num_tests=0
    current_spec_has_failed=0
    tests_started=1
}

function execute() {
    code="$1"
    input="$2"

    {
        rm ./out.asm
        rm ./out.o
        rm ./out
    } 2> /dev/null

    errors=$({
      # compile, link and assemble the program
      echo "$code" > in.oxy

      export RUST_BACKTRACE=1
      ./target/release/oxynium -o=test-out --std std.asm in.oxy
    } 2>&1 > /dev/null)

    if [ "$errors" != "" ]; then
        echo "$errors"
        return 0
    fi

    output="BASH_ERROR_NOT_ASSIGNED"
    if test -f "./test-out"; then
        # remove any \0 characters from output
        # stops 'warning: command substitution: ignored null byte in input'
        if [ "$input" != "" ]; then
            output=$({
                echo "$input" | ./test-out;
            } 2>&1 | tr -d '\000')
        else
            output=$({ ./test-out; } 2>&1 | tr -d '\000')
        fi

    else
        output="ERROR_NO_OUTPUT"
    fi

    output=$(echo "$output" | tr -d '\n')
    echo "$output"
}

function test_failed() {
    code="$1"
    expected="$2"
    output="$3"
    fails=$((fails+1))

    if [ "$current_spec_has_failed" -eq 0 ]; then
        echo -e "${RED}❌ $current_spec_name ($current_spec_file)${NC}"
    fi
    current_spec_has_failed=1

    # shellcheck disable=SC2059
    printf "${RED}#${current_spec_num_tests}${NC}\n"
    printf "    Executing: '%s'\n" "$code"
    printf "    Expected:  '%s'\n" "$expected"
    printf "    Got:       '%s'\n\n" "$output"
    if [ "$errors" != "" ]; then
        printf "    Errors:   '%s'\n\n" "$errors"
    fi
}
function emit_warning() {
    code="$1"
    expected="$2"
    output="$3"
    info="$4"

    warnings=$((warnings+1))

    # shellcheck disable=SC2059
    printf "${ORANGE}#${current_spec_num_tests}${NC}\n"
    printf "   ${ORANGE} Warning: %s\n${NC}" "$info"
    printf "    Executing: '%s'\n" "$code"
    printf "    Expected:  '%s'\n" "$expected"
    printf "    Got:       '%s'\n\n" "$output"
    if [ "$errors" != "" ]; then
        printf "    Errors:   '%s'\n\n" "$errors"
    fi
}

function expect() {
    if [ "$filter" != "" ] && [[ "$current_spec_name" != *"$filter"* ]]; then
        return
    fi
    expected="$1"
    code="$2"
    stdin="$3"

    tests=$((tests+1))
    current_spec_num_tests=$((current_spec_num_tests+1))

    output=$(execute "$code" "$stdin")
    # replace \r with \r\n in expected
    expected=$(echo "$expected" | tr '\r' '\n')
    output=$(echo "$output" | tr '\r' '\n')

    if [ "$output" != "$expected" ]; then
        test_failed "$code" "$expected" "$output"
    fi
}

function expect_err() {
    if [ "$#" -lt 2 ]; then
        echo "expect_err expects 2 arguments, got $#"
        exit 1
    fi
    if [ "$filter" != "" ] && [[ "$current_spec_name" != *"$filter"* ]]; then
        return
    fi
    expected="$1"
    code="$2"
    stdin="$3"

    tests=$((tests+1))
    current_spec_num_tests=$((current_spec_num_tests+1))

    output=$(execute "$code" "$stdin")
    split_arr=(${output//:/ })
    output_err="${split_arr[0]}"

    if [[ "$output" == *"Unknown error location!"* ]]; then
        emit_warning "$code" "$expected" "$output" "Unknown error locations are bad"
    fi

    if [ "$expected" != "$output_err" ]; then
        test_failed "$code" "$expected" "$output"
    fi
}

function expect_expr_int() {
    expect "$1" "print(($2).str())" "$3"
}
function expect_expr_bool() {
    expect "$1" "print(($2).str())" "$3"
}

oxy_comp=()
oxy_exec=()
cpp_comp=()
cpp_exec=()
num_perf_tests=0
function perf_test_comp_cpp() {
    if [ "$filter" != "" ] && [[ "$current_spec_name" != *"$filter"* ]]; then
        return
    fi
    n="$1"
    expected="$2"
    oxy="$3"
    cpp="$4"

    expect "$expected" "$oxy"

    perf_timer_start=$(date +"%s.%4N")

    errors=$({
        # in.oxy already has code in
      ./target/release/oxynium -o=test-out --std std.asm in.oxy
    } 2>&1 > /dev/null)

    if [ "$errors" != "" ]; then
        test_failed "$oxy" 'no errors' "$errors"
    fi

    oxy_comp+=("$(echo "$(date +"%s.%4N") - $perf_timer_start" | bc -l)")
    perf_timer_start=$(date +"%s.%4N")

    for ((i=0;i<"$n";i++)); do
        ./test-out > /dev/null
    done

    oxy_exec+=("$(echo "$(date +"%s.%4N") - $perf_timer_start" | bc -l)")
    perf_timer_start=$(date +"%s.%4N")

    echo "$cpp" > out.cpp

    gcc out.cpp -O0 -lstdc++

    cpp_comp+=("$(echo "$(date +"%s.%4N") - $perf_timer_start" | bc -l)")
    perf_timer_start=$(date +"%s.%4N")

    cpp_out=$(./a.out)
    for ((i=1;i<"$n";i++)); do
        ./a.out > /dev/null
    done

    cpp_exec+=("$(echo "$(date +"%s.%4N") - $perf_timer_start" | bc -l)")
    perf_timer_start=$(date +"%s.%4N")

    num_perf_tests=$((num_perf_tests+1))

    if [ "$cpp_out" != "$expected" ]; then
        test_failed "C++ performance comparison" "$expected" "$cpp_out"
    fi
}

function perf_results() {
    if [ "$num_perf_tests" -eq 0 ]; then
        return
    fi

    printf "Oxy Comp: ${oxy_comp[*]}\n"
    printf "C++ Comp: ${cpp_comp[*]}\n"
    printf "Oxy Exec: ${oxy_exec[*]}\n"
    printf "C++ Exec: ${cpp_exec[*]}\n"

    comp_ratio_average=0
    exec_ratio_average=0

    for i in "${!oxy_comp[@]}"; do
        comp_ratio=$(echo "${cpp_comp[$i]} / ${oxy_comp[$i]}" | bc -l)
        exec_ratio=$(echo "${cpp_exec[$i]} / ${oxy_exec[$i]}" | bc -l)
        comp_ratio_average=$(echo "$comp_ratio_average + $comp_ratio" | bc -l)
        exec_ratio_average=$(echo "$exec_ratio_average + $exec_ratio" | bc -l)
    done

    comp_ratio_average=$(echo "$comp_ratio_average / $num_perf_tests" | bc -l)
    exec_ratio_average=$(echo "$exec_ratio_average / $num_perf_tests" | bc -l)

    printf "Mean comp time ratio oxy:cpp=1:%.*f\n" 3 "$comp_ratio_average"
    printf "Mean exec time ratio oxy:cpp=1:%.*f\n" 3 "$exec_ratio_average"

}

function results() {
    if [ "$tests" -eq 0 ]; then
        echo "No tests run"
        exit 1
    fi

    perf_results

    end=$(date +"%s.%4N")
    runtime=$(echo "$end - $start" | bc -l)
    tests_runtime=$(echo "$end - $tests_start" | bc -l)
    time_per_test=$(echo "$tests_runtime * 1000 / $tests" | bc -l)
    printf "Tests ran in ${ORANGE}%ss${NC} (%.*fms per test)\n" "$runtime" 1 "$time_per_test"

    if [ "$warnings" -gt 0 ]; then
        # shellcheck disable=SC2059
        printf "${ORANGE}  ${warnings} warnings${NC}\n"
    fi

    if [ "$fails" -eq 0 ]; then
        # shellcheck disable=SC2059
        printf "${GREEN}  ${tests}/${tests} tests passed!${NC}\n"
        exit 0
    else
        # shellcheck disable=SC2059
        printf "${RED}  ${fails}/${tests} tests failed${NC}\n"
        exit 1
    fi
}

function clean_up() {
    # show last 'all passing' message
    describe ""
    rm ./in.oxy
    rm ./test-out
}

start=$(date +"%s.%4N")

run_cargo_tests

setup

tests_start=$(date +"%s.%4N")

for f in $(find ./test/spec -name '*.sh' | sort); do
  current_spec_file="$f"
  # shellcheck disable=SC1090
  source "$f";
done

clean_up
results
